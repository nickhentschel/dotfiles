#-----------------------------------------------
# GENERAL SETTINGS
#-----------------------------------------------

run-shell "powerline-daemon -q"
source "/Users/nhentschel/powerline/powerline/bindings/tmux/powerline.conf"

# set-option -g status-position top

# Enable mouse support
setw -g mode-mouse on

# use UTF8
set -g utf8
set-window-option -g utf8 on

# make tmux display things in 256 colors
set -g default-terminal "screen-256color"

# set default shell
set-option -g default-shell "/usr/local/bin/fish"

# Bind C-b to C-a, its just easier
set-option -g prefix C-a

# shorten command delay
set -sg escape-time 1

# set window and pane index to 1 (0 by default)
set-option -g base-index 1
setw -g pane-base-index 1

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Highlight unfocused windows which have activity
setw -g monitor-activity on
set -g visual-activity on

# Use vim keybindings in copy mode
setw -g mode-keys vi

#-----------------------------------------------
# BINDINGS
#-----------------------------------------------

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Toggle make pane full screen
bind-key = resize-pane -Z \; display-message "Zoom zoom zoom"

# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# use PREFIX | to split window horizontally and PREFIX - to split vertically
bind | split-window -h
bind - split-window -v

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

bind -n S-Right select-pane -R
bind -n S-Left select-pane -L
bind -n S-Up select-pane -U
bind -n S-Down select-pane -D

# and use C-h and C-l to cycle thru panes
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

#-----------------------------------------------
# LOOK AND FEEL
#-----------------------------------------------

# PANES
# set -g status-bg colour235
# set -g status-fg white
#
# set-window-option -g window-status-current-fg black
# set-window-option -g window-status-current-bg green
#
# set -g pane-border-fg colour235
# set -g pane-border-bg black
# set -g pane-active-border-fg green
# set -g pane-active-border-bg black
# # colorize messages in the command line
# set-option -g message-bg black #base02
# set-option -g message-fg brightred #orange
# set -g mouse-select-pane on

# TABS
# setw -g window-status-format "#[fg=white]#[bg=blue] #I #[bg=blue]#[fg=white] #W "
# setw -g window-status-current-format "#[bg=red]#[fg=white] *#I #[fg=white,bold]#[bg=red] [#W] "
# set -g set-titles-string "tmux:#I #W"
# setw -g window-status-content-attr bold,blink,reverse

# STATUS BAR
# set-option -g status-position bottom
# # set -g status-fg white
# set -g status-bg black
# # set -g status-left ''
# set -g status-right-length 80
# set -g status-left-length 60
# # set -g status-right '#[fg=brightblue]ßÜ #[fg=brightyellow]#(tmux_upspeed)/#(tmux_downspeed) #[fg=colour7]| #[fg=brightblue]ª #[fg=brightyellow]#(sensors | grep temp1 | cut -d+ -f2 | cut -d. -f1) #[fg=colour7]| #[fg=brightblue]ï #[fg=brightyellow]#(acpi -b | cut -d" " -f4 | cut -d"%" -f1) #[fg=colour7]| #[fg=brightred]#(cut -d " " -f 1-3 /proc/loadavg) #[fg=colour7]| #[fg=brightgreen]%a %H:%M'
# # set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg) #[fg=colour8]// #[fg=cyan]Tmux [#S]'
# # set -g status-right '#[fg=white]#(whoami)@#(hostname)'
# set -g status-left "#[fg=blue]Session: #[fg=default]#[fg=yellow]#S #[fg=default]"
# set -g status-right "#[fg=blue]#H#[fg=default] | #[fg=cyan]Uptime: #(uptime | cut -d \" \" -f4-5 | cut -d\",\" -f1)#[fg=default] | #[fg=magenta]Disk Free: #(df -h | sed -n 2p | awk \'{print $4}\')#[fg=default] | #[fg=yellow]%y-%m-%d %H:%M "

# List of plugins
# Supports `github_username/repo` or full git URLs
set -g @tpm_plugins "              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-sensible       \
  tmux-plugins/tmux-yank       \
  tmux-plugins/tmux-copycat    \
"
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# initializes TMUX plugin manager
run-shell ~/.tmux/plugins/tpm/tpm
