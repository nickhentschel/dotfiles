# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # Falls back to size specified by window manager if set to 0x0.
  # (changes require restart)
  dimensions:
    columns: 80
    lines: 24

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 2
    y: 2

  # Window decorations
  #
  # Available values:
  # - `full`: Window with title bar and title bar buttons
  # - `none`: Window without title bar, rounded corners, or drop shadow
  # - `transparent`: Window with title bar with transparent background and title
  #   bar buttons
  # - `buttonless`: Window with title bar with transparent background and no
  #   title bar buttons
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #     - buttonless: Title bar, transparent background and title bar buttons
  #     - transparent: Title bar, transparent background, but no title bar buttons
  decorations: full

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

  # Faux Scrolling
  #
  # The `faux_multiplier` setting controls the number of lines the terminal
  # should scroll when the alternate screen buffer is active. This is used
  # to allow mouse scrolling for applications like `man`.
  #
  # Specifying `0` will disable faux scrolling.
  faux_multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  auto_scroll: false

# Spaces per Tab (changes require restart)
#
# This setting defines the width of a tab in cells.
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required to
# change the `it` value in terminfo when altering this setting.
tabspaces: 8

font:
  # The normal (roman) font face to use.
  normal:
    family: "Monaco"
    # Style can be specified to pick a specific face.
    style: Regular

  # The bold font face
  bold:
    family: "Monaco"
    # Style can be specified to pick a specific face.
    style: Regular

  # The italic font face
  italic:
    family: "Monaco"
    # Style can be specified to pick a specific face.
    style: Regular

  # Point size of the font
  size: 12.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: false

# Should display the render timer
render_timer: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors (Solarized Dark)
colors:
  # Default colors
  primary:
    background: '0x002b36'
    foreground: '0x839496'

  # Normal colors
  normal:
    black:   '0x073642'
    red:     '0xdc322f'
    green:   '0x859900'
    yellow:  '0xb58900'
    blue:    '0x268bd2'
    magenta: '0xd33682'
    cyan:    '0x2aa198'
    white:   '0xeee8d5'

  # Bright colors
  bright:
    black:   '0x002b36'
    red:     '0xcb4b16'
    green:   '0x586e75'
    yellow:  '0x657b83'
    blue:    '0x839496'
    magenta: '0x6c71c4'
    cyan:    '0x93a1a1'
    white:   '0xfdf6e3'

# # Molokai
# colors:
#   # Default colors
#   primary:
#     background: '0x121212'
#     foreground: '0xbbbbbb'
#
#   # Normal colors
#   normal:
#     black:   '0x121212'
#     red:     '0xfa2573'
#     green:   '0x98e123'
#     yellow:  '0xdfd460'
#     blue:    '0x1080d0'
#     magenta: '0x8700ff'
#     cyan:    '0x43a8d0'
#     white:   '0xbbbbbb'
#
#   # Bright colors
#   bright:
#     black:   '0x555555'
#     red:     '0xf6669d'
#     green:   '0xb1e05f'
#     yellow:  '0xfff26d'
#     blue:    '0x00afff'
#     magenta: '0xaf87ff'
#     cyan:    '0x51ceff'
#     white:   '0xffffff'

# Google Colors
# colors:
#   # Default colors
#   primary:
#     background: '0x151718'
#     foreground: '0xffffff'
#
#   # Normal colors
#   normal:
#     black:   '0x000000'
#     red:     '0xca0813'
#     green:   '0x50981c'
#     yellow:  '0xc39f22'
#     blue:    '0x3766a2'
#     magenta: '0x74517a'
#     cyan:    '0x199899'
#     white:   '0xd3d7d0'
#
#   # Bright colors
#   bright:
#     black:   '0x555753'
#     red:     '0xec2d32'
#     green:   '0x1bb827'
#     yellow:  '0xfbe85c'
#     blue:    '0x73a0cd'
#     magenta: '0xf020c9'
#     cyan:    '0x1db5bc'
#     white:   '0xeeeeec'

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
background_opacity: 1.0

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher: open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
# shell:
#   program: /bin/bash
#   args:
#     - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
#
# Want to add a binding (e.g. "PageUp") but are unsure what the X sequence
# (e.g. "\x1b[5~") is? Open another terminal (like xterm) without tmux,
# then run `showkey -a` to get the sequence associated to a key combination.
key_bindings:
- { key: V,        mods: Control|Shift,    action: Paste               }
- { key: C,        mods: Control|Shift,    action: Copy                }
- { key: V,        mods: Command, action: Paste                        }
- { key: Q,        mods: Command, action: Quit                         }
- { key: W,        mods: Command, action: Quit                         }
- { key: Insert,   mods: Shift,   action: PasteSelection               }
- { key: Key0,     mods: Control, action: ResetFontSize                }
- { key: Equals,   mods: Control, action: IncreaseFontSize             }
# - { key: Subtract, mods: Shift,   action: DecreaseFontSize             }
- { key: Space,    mods: Control, chars: "\x00"                        }
- { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
- { key: Home,                    chars: "\x1b[1~",  mode: ~AppCursor  }
- { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
- { key: End,                     chars: "\x1b[4~",  mode: ~AppCursor  }
- { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
- { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
- { key: PageUp,                  chars: "\x1b[5~"                     }
- { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
- { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
- { key: PageDown,                chars: "\x1b[6~"                     }
- { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
- { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
- { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
- { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
- { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
- { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
- { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
- { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
- { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
- { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
- { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
- { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
- { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
- { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
- { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
- { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
- { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
- { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
- { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
- { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
- { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
- { key: F1,                      chars: "\x1bOP"                      }
- { key: F2,                      chars: "\x1bOQ"                      }
- { key: F3,                      chars: "\x1bOR"                      }
- { key: F4,                      chars: "\x1bOS"                      }
- { key: F5,                      chars: "\x1b[15~"                    }
- { key: F6,                      chars: "\x1b[17~"                    }
- { key: F7,                      chars: "\x1b[18~"                    }
- { key: F8,                      chars: "\x1b[19~"                    }
- { key: F9,                      chars: "\x1b[20~"                    }
- { key: F10,                     chars: "\x1b[21~"                    }
- { key: F11,                     chars: "\x1b[23~"                    }
- { key: F12,                     chars: "\x1b[24~"                    }
- { key: Back,                    chars: "\x7f"                        }
- { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
- { key: Insert,                  chars: "\x1b[2~"                     }
- { key: Delete,                  chars: "\x1b[3~"                     }
